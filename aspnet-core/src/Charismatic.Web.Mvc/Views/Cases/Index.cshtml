@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using Charismatic.Web.Startup
@{
    ViewBag.CurrentPageName = PageNames.Cases; // The menu item will be active for this page. }
}

@await Component.InvokeAsync(typeof(ContentHeaderViewComponent), new { PageName = Tokens.Cases })




<section class="cases-list">

    <div class="container flex-wrap" style="display: flex; justify-content: space-between;">
        <ul class="list-unstyled grey-table-menu">
            <li class="active"><a href="#">@Tokens.AllCases</a></li>
            <li><a href="#">@Tokens.NewCases</a></li>
            <li><a href="#">@Tokens.Pending</a></li>
            <li><a href="#">@Tokens.TP_Ready</a></li>
            <li><a href="#">@Tokens.Modification</a></li>
            <li><a href="#">@Tokens.TP_Accepted</a></li>
        </ul>
        <ul class="list-unstyled grey-table-menu">
            <li><a href="#">@Tokens.Deleivery</a></li>
            <li><a href="#">@Tokens.Completed</a></li>
            <li><a href="#">@Tokens.AccountStatement</a></li>
        </ul>

        <div style="display: inline-block">
            <button class="btn btn-custom bg-blue" onclick="window.location='/Cases/CreatePrivateCase';">@Tokens.AddPrivateCase</button>
            <button class="btn btn-custom bg-blue" onclick="window.location='/Cases/CreateCenterCase';">@Tokens.AddCenterCase</button>
        </div>
    </div>
</section>


<div class="content-body">
    <div class="col-md-12" style="background-color: white; padding: 10px 20px 10px 20px" ;>
        <div id="table"></div>
    </div>
</div>


@section scripts {
    <script>
        console.log(abp);
    function errorMessage(event , message) {
          var result = DevExpress.ui.dialog.custom({
                showTitle: false,
              dragEnabled: false,
              messageHtml: `<div><h4>${message}</h4></div>`,
                buttons: [
                    {
                        text:"@Tokens.Ok",
                        type: "normal",
                        width: 120,
                        onClick: function (event) {
                            return false;
                        }
                    }]
            });
            event.cancel = $.Deferred(function (deferred) {
                result.show().done(function (result) {
                    deferred.resolve(!result);
            });
            }).promise();
    }

        var gridDataSource = new DevExpress.data.DataSource({
               load: function (loadOptions) {
                   var d = $.Deferred();
                    abp.services.app.cases.getAllCases({
                       filter: loadOptions.filter ? JSON.stringify(loadOptions.filter) : "", // Pass if filtering is remote
                       sorting: loadOptions.sort ? JSON.stringify(loadOptions.sort) : "",       // Pass if sorting is remote
                       skipCount: loadOptions.skip >= 0 ? loadOptions.skip : 0,     // The number of records to skip
                       maxResultCount: loadOptions.take > 0 ? loadOptions.take : 100,     // The number of records to take
                       requireTotalCount: true,   // A flag telling the server whether the total count of records (totalCount) is required

                   }).done(function (result) {
                       result.data = result.items;
                       // You can process the received data here
                       d.resolve(result, {
                           //totalCount: result.result.totalCount,
                       });
                   });
                   return d.promise();
               },
               insert: function (values) {
                   return abp.services.app.cases.create(values).done(function () {
                       displayToast('@String.Format(@Messages.ObjectAddedSuccessfully,@Tokens.Case)', 'success');
                       $(".dx-loadpanel-content").hide();
                   });
               },
               update: function (key, values) {
                   return abp.services.app.cases.update(values).done(function () {
                       displayToast('@String.Format(@Messages.ObjectUpdatedSuccessfully, @Tokens.Case)', 'success');
                       $(".dx-loadpanel-content").hide();
                         $('#table').dxDataGrid("instance").refresh();
                   });
               },
               remove: function (key) {
                   return abp.services.app.cases.delete(key, { async: false }).done(function () {
                      displayToast( '@String.Format(@Messages.ObjectDeleedSuccessfully,@Tokens.Case)' , 'success');
                       $(".dx-loadpanel-content").hide();
                       $('#table').dxDataGrid("instance").refresh();
                   });
               },
           });

           $(function () {
                var types;
                var dataGrid = $("#table").dxDataGrid({

                    dataSource: gridDataSource,
                    searchPanel: {
                        visible: true,
                        width: 240,
                    },
                    paging: {
                        pageSize: 6,
                        pageIndex: 1    // Shows the second page
                    },
                    headerFilter: {
                        visible: true,
                        allowSearch: true
                    },
                    filterRow: {
                        visible: true,
                        applyFilter: "auto"
                    },
                    sorting: {
                        mode: "multiple"
                    },
                    columnsAutoWidth: true,
                    pager: {
                        visible: true,
                        showPageSizeSelector: true,
                        allowedPageSizes: [5, 10, 25, 50],
                        showInfo: true,
                    },
                    columns: [
                        {
                            dataField: "doctorName",
                            caption: "@Tokens.DoctorName",
                            allowFiltering: false,
                            allowSorting: true,
                            allowSearch: false,
                        },{
                            dataField: "patientReferraisName",
                            caption: "@Tokens.PatientName",
                            allowFiltering: false,
                            allowSorting: true,
                            allowSearch: false,
                        },{
                            dataField: "caseNumber",
                            caption: "@Tokens.CaseNumber",
                            allowFiltering: false,
                            allowSorting: true,
                            allowSearch: false,
                        },
                        {
                            dataField: "type",
                            caption: "@Tokens.CaseType",
                            allowFiltering: false,
                            allowSorting: true,
                            allowSearch: false
                        },
                        {
                            dataField: "caseStatus",
                            caption: "@Tokens.Status",
                            allowFiltering: false,
                            allowSorting: true,
                            allowSearch: false
                        },
                        {
                            dataField: "caseEvaluationType",
                            caption: "@Tokens.Evaluation",
                            allowFiltering: false,
                            allowSorting: true,
                            allowSearch: false
                        }
                    ],
                    remoteOperations: false,
                }).dxDataGrid("instance");
            })

    </script>
}