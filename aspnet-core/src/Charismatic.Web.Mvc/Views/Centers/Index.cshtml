@using Charismatic.Web.Startup
@{ ViewBag.CurrentPageName = PageNames.Centers; // The menu item will be active for this page. }
}
@*@await Component.InvokeAsync(typeof(ContentHeaderViewComponent), new { PageName = Tokens.Centers })*@
<div class="table-header">
    <h3 class="text-blue">@Tokens.Centers </h3>
</div><!--.table-header-->

<div class="bg-table-grey">

    <div class="col-md-12 table-responsive" style="background-color: white; padding: 10px 20px 10px 20px" ;>
        <div id="table">

        </div>
    </div>
</div>
@section styles {
    <style>
        .form-container {
            padding: 20px;
        }

        .detail-form label {
            font-weight: bold;
        }
    </style>
}
@section scripts {
    <script>
        // c
        //onfirm delete message
        var countries = (@Html.Raw(Json.Serialize(ViewBag.countries))).map(a => a.value);
        var editors = {};
        var cities = [];
        var isEditable = false;
        var countryId = null;
    function errorMessage(event , message) {
          var result = DevExpress.ui.dialog.custom({
                showTitle: false,
              dragEnabled: false,
              messageHtml: `<div><h4>${message}</h4></div>`,
                buttons: [
                    {
                        text:"@Tokens.Ok",
                        type: "normal",
                        width: 120,
                        onClick: function (event) {
                            return false;
                        }
                    }]
            });
            event.cancel = $.Deferred(function (deferred) {
                result.show().done(function (result) {
                    deferred.resolve(!result);
            });
            }).promise();
    }

        @*var reasonType;
        abp.services.app.enumHelper.getEnumAsList("@typeof(ITLand.CMMS.ReasonTypes)", {
            async: false,
        }).done(function (result) {
            reasonType = result;
        });*@
        var gridDataSource = new DevExpress.data.DataSource({
            load: function (loadOptions) {
                var d = $.Deferred();
                abp.services.app.center.getAllCenters({
                    filter: loadOptions.filter ? JSON.stringify(loadOptions.filter) : "", // Pass if filtering is remote
                    sorting: loadOptions.sort ? JSON.stringify(loadOptions.sort) : "",       // Pass if sorting is remote
                    skipCount: loadOptions.skip >= 0 ? loadOptions.skip : 0,     // The number of records to skip
                    maxResultCount: loadOptions.take > 0 ? loadOptions.take : 100,     // The number of records to take
                    requireTotalCount: true,   // A flag telling the server whether the total count of records (totalCount) is required

                }).done(function (result) {
                   // debugger;
                    result.data = result.items;
                    // You can process the received data here
                    d.resolve(result, {
                        //totalCount: result.result.totalCount,
                    });
                });
                return d.promise();
            },
            insert: function (values) {
               // debugger;
                return abp.services.app.center.create(values).done(function () {
                    displayToast('@String.Format(@Messages.ObjectAddedSuccessfully,@Tokens.Center)', 'success');
                    $(".dx-loadpanel-content").hide();
                });
            },
            update: function (key, values) {
              //  debugger;
                return abp.services.app.center.update(values).done(function () {


                    displayToast('@String.Format(@Messages.ObjectUpdatedSuccessfully, @Tokens.Center)', 'success');
                    $(".dx-loadpanel-content").hide();
                      $('#table').dxDataGrid("instance").refresh();
                });
            },
            remove: function (key) {
                return abp.services.app.center.delete(key, { async: false }).done(function () {
                   displayToast( '@String.Format(@Messages.ObjectDeleedSuccessfully,@Tokens.Center)' , 'success');
                    $(".dx-loadpanel-content").hide();
                    $('#table').dxDataGrid("instance").refresh();
                });
            },
        });

        $(function () {
            var types;
            debugger

            var dataGrid = $("#table").dxDataGrid({
                dataSource: gridDataSource,
                searchPanel: {
                    visible: true,
                    width: 240,
                },
                paging: {
                    pageSize: 6,
                    pageIndex: 1    // Shows the second page
                },
                headerFilter: {
                    visible: true,
                    allowSearch: true
                },
                filterRow: {
                    visible: true,
                    applyFilter: "auto"
                },
                sorting: {
                    mode: "multiple"
                },
                columnsAutoWidth: true,
                pager: {
                    visible: true,
                    showPageSizeSelector: true,
                    allowedPageSizes: [5, 10, 25, 50],
                    showInfo: true,
                },
                editing: {
                    allowAdding: true,
                    allowUpdating: true,
                    allowDeleting: true,
                    useIcons: true,
                    texts: {
                        addRow: "@Tokens.AddCenter",
                        confirmDeleteMessage: null,
                        saveRowChanges: "@Tokens.Save",
                        cancelRowChanges: "@Tokens.Cancel",
                    },
                    mode: "popup",
                    popup: {
                        showTitle: true,

                        width: '700',
                        height: '400',
                        title: "@Tokens.CenterInfo",
                    },

                    form: {
                        itemType: "group",
                        // colCount: 'auto',
                        //colCountByScreen: {
                        //    md: 4,
                        //    sm: 2,
                        //},
                        colCount: 2,
                        colSpan: 1,
                        items: [
                            {
                                dataField: "name",
                                validationRules: [
                                    {
                                        type: "required", message: '@string.Format(DataAnnotations.Required, Tokens.Name)'
                                    },
                                    {
                                        type: "pattern",
                                        message: '@string.Format(DataAnnotations.NameFormat, Tokens.Name)',
                                        pattern: '@CharismaticConsts.NameFormat'.replace("&#x2B;", "+")
                                    },


                                ]
                            },

                                 {
                                dataField: "accountEmail",
                                dataType: "Email",
                                validationRules: [
                                    {
                                        type: "email", message: '@string.Format(DataAnnotations.Email, Tokens.AccountEmail)'
                                    },]
                            },
                            {
                                dataField: "building",
                                // dataType: "String",
                                validationRules: []
                            },
                            {
                                dataField: "street",
                                dataType: "String",
                                validationRules: []
                            },
                            //{
                            //    dataField: "city",
                            //    dataType: "String",
                            //    validationRules: []
                            //},


                            {
                                dataField: "countryId",
                                colSpan: 1,
                                
                                //label:"@Tokens.Country",
                                label: { text: "@Tokens.Country" },
                                //editorType: "dxSelectBox",
                                //editorOptions: {
                                //    dataSource: countries,
                                //    placeholder: "Select",
                                //    valueExpr: "value",
                                //    displayExpr: "text",
                                //    disabled: false,
                                //    showClearButton: true,
                                //},
                                validationRules: [
                                    {
                                        type: "required", message: '@string.Format(DataAnnotations.Required, Tokens.Country)'
                                    },
                                ],
                            },
                           
                             {
                                 dataField: "stateId",
                                    colSpan: 1,
                                     //label:"@Tokens.City",
                                    label: { text: "@Tokens.City" },
                                    editorType: "dxSelectBox",
                                 editorOptions: {
                                  //   dataSource: cities,
                                        placeholder: "@Tokens.Select",
                                        valueExpr: "id",
                                        displayExpr: "name",
                                        //disabled: true,
                                    },
                                    validationRules: [
                                        {
                                            type: "required", message: '@string.Format(DataAnnotations.Required, Tokens.Select)'
                                        },
                                    ],
                                },
                        ]
                    }
                },

                onRowRemoving: function (e) {
                    displayCOnfirmDelete(e, '@String.Format(@Messages.ConfirmDeleteObject,@Tokens.Center)');

                },


                columns: [
                    {
                        dataField: "id",
                        caption: "@Tokens.Id",
                        allowFiltering: true,
                        allowSorting: true,
                        allowSearch: true,
                        allowEditing: false,
                    },
                    {
                        dataField: "name",
                        caption: "@Tokens.Name",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: true,
                    }, {
                        dataField: "building",
                        caption: "@Tokens.Building",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: true,
                    }, {
                        dataField: "street",
                        caption: "@Tokens.Street",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: true,
                    }, {
                        dataField: "city",
                        caption: "@Tokens.City",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: true,
                    },
                    {
                        dataField: "accountEmail",
                        caption: "@Tokens.AccountEmail",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: true,
                    },
                    {
                        dataField: "creationTime",
                        caption: "@Tokens.CreationDateandTime",
                        dataType: "datetime",
                        allowFiltering: false,
                        allowSorting: true,
                        allowSearch: false,
                        sortIndex: 0,
                        sortOrder: "desc",
                    }, {
                        dataField: "creatorUserName",
                        caption: "@Tokens.Createdby",
                        allowFiltering: false,
                        allowSorting: false,
                        allowSearch: true,
                        allowEditing: false,
                    },
                    {
                        dataField: "countryId",
                        caption: "@Tokens.Countries",
                        allowFiltering: true,
                        visible: false,
                        allowSorting: false,
                        allowSearch: false,
                        lookup: {
                            valueExpr: "value",
                            displayExpr: "text",
                            dataSource: countries,
                        }
                    },                  {
                        dataField: "stateId",
                        caption: "@Tokens.City",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: false,
                        visible:false
                    },

                              {
                        dataField: "cityName",
                        caption: "@Tokens.City",
                        allowFiltering: true,
                        allowSorting: false,
                        allowSearch: false,
                    },
                ],
                masterDetail: {
                    enabled: true,
                    template: masterDetailTemplate
                },
                onEditingStart: function (e) {
                    isEditable = true;
                    countryId = e.data.countryId;
                    abp.services.app.country.getCities(e.data.countryId,
                        {
                            async: false,
                        }).done(function (result) {
                           // editors['stateId'].option("disabled", false);
                            

                            cities =    new DevExpress.data.DataSource({
                                    store: result,
                                    //filter: ['id', '=', e.value],
                                }
                            );
                        });
                   
                },
                onEditorPreparing: function (e) {
                    isChanged = false;

                    if (e.parentType === "dataRow") {
                        switch (e.dataField) {
                            case "countryId":
                                if (e.parentType === "dataRow") {

                                    //abp.services.app.country.getCities(countryId,
                                    //    {
                                    //        async: false,
                                    //    }).done(function (result) {
                                    //        editors['stateId'].option("disabled", false);
                                    //        editors['stateId'].option("dataSource",

                                    //            new DevExpress.data.DataSource({
                                    //                store: result,
                                    //                //filter: ['id', '=', e.value],
                                    //            })
                                    //        );
                                    //    });
                                    // initDragging(e.editorOptions.component);
                                    var standardHandler = e.editorOptions.onValueChanged;
                                    e.editorOptions.onValueChanged = function (e) { // Overrides the standard handler
                                        abp.services.app.country.getCities(e.value,
                                            {
                                                async: false,
                                            }).done(function (result) {
                                                editors['stateId'].option("disabled", false);
                                                editors['stateId'].option("dataSource",

                                                    new DevExpress.data.DataSource({
                                                        store: result,
                                                        //filter: ['id', '=', e.value],
                                                    })
                                                );
                                            });
                                    }
                                    standardHandler(e); // Calls the standard handler to save the edited value
                                }



                        }
                    }
                },
                onEditorPrepared: function (e) {
                    if (e.parentType == 'dataRow') {
                        editors[e.dataField] = e.editorElement[e.editorElement.data().dxComponents[0]]('instance');
                    }


               
                },
                onRowExpanding: function (e) {

                    e.component.collapseAll(-1);
                },
                remoteOperations: true,
                //onRowUpdating: function (options) {
                //    debugger;
                //    options.newData = $.extend({}, options.oldData, options.newData);
                //},
            }).dxDataGrid("instance");
        })
         function masterDetailTemplate(_, masterDetailOptions) {
            abp.services.app.center.get({ id: masterDetailOptions.data.id },
                {
                    async: false,
                }).done(function (result) {
                 //   debugger;
                    detail = result;
                });

            return $("<div>").dxTabPanel({
                items: [{
                    title: "@Tokens.CenterDetails",
                    template: createPositionTabTemplate(detail)
                }]
            });
        }

        function createPositionTabTemplate(detail) {
       //     debugger;
            return function () {

                return $("<div>").addClass("detail-form form-container").dxForm({
                    formData: detail,
                    readOnly: true,
                    colCount: 'auto',
                    items: [{ dataField: "id", label: { text: "@Tokens.Id" } },
                        { dataField: "name", label: { text: "@Tokens.Name" } },
                        { dataField: "countryId", label: { text: "@Tokens.CountryId" } },
                        { dataField: "cityName", label: { text: "@Tokens.City" } },
                        { dataField: "building", label: { text: "@Tokens.Building" } },
                        { dataField: "street", label: { text: "@Tokens.Street" } },
                        { dataField: "accountEmail", label: { text: "@Tokens.AccountEmail" } },




                    {
                        dataField: "creationTime", label: { text: "@Tokens.CreationDate" }, editorType: "dxDateBox", editorOptions: {
                            displayFormat: "MM/dd/yyyy hh:mm a",
                            width: "100%",
                        }
                    },
                    { dataField: "creatorUserName", label: { text: "@Tokens.Createdby" } },

                    ],
                });
            }
        }


    </script>
}
