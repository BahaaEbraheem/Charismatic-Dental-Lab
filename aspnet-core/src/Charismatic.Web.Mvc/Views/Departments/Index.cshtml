@using Charismatic.Web.Startup
@{
    ViewBag.CurrentPageName = PageNames.Departments; // The menu item will be active for this page. }
}
@*@await Component.InvokeAsync(typeof(ContentHeaderViewComponent), new { PageName = Tokens.Doctors })
    <div class="content-body">
        <div class="col-md-12" style="background-color: white; padding: 10px 20px 10px 20px" ;>
            <div id="table">

            </div>
        </div>
    </div>*@
<div class="table-header">
    <h3 class="text-blue">@Tokens.Department </h3>
</div><!--.table-header-->
<div class="bg-table-grey">
    <div class="col-md-12 table-responsive" style="background-color: white; padding: 10px 20px 10px 20px" ;>
        <div id="table">

        </div>
    </div>
</div>
@section styles {
    <style>
        .form-container {
            padding: 20px;
        }

        .detail-form label {
            font-weight: bold;
        }
    </style>
}
@section scripts {
    <script>
                 // confirm delete message
        var admins = (@Html.Raw(Json.Serialize(ViewBag.admins))).map(a => a.value);

    function errorMessage(event , message) {
          var result = DevExpress.ui.dialog.custom({
                showTitle: false,
              dragEnabled: false,
              messageHtml: `<div><h4>${message}</h4></div>`,
                buttons: [
                    {
                        text:"@Tokens.Ok",
                        type: "normal",
                        width: 120,
                        onClick: function (event) {
                            return false;
                        }
                    }]
            });
            event.cancel = $.Deferred(function (deferred) {
                result.show().done(function (result) {
                    deferred.resolve(!result);
            });
            }).promise();
    }
        @*var reasonType;
        abp.services.app.enumHelper.getEnumAsList("@typeof(ITLand.CMMS.ReasonTypes)", {
            async: false,
        }).done(function (result) {
            reasonType = result;
        });*@
        var isActive;
        var gridDataSource = new DevExpress.data.DataSource({
            load: function (loadOptions) {
                var d = $.Deferred();
                abp.services.app.department.getAllDepartments({
                    filter: loadOptions.filter ? JSON.stringify(loadOptions.filter) : "", // Pass if filtering is remote
                    sorting: loadOptions.sort ? JSON.stringify(loadOptions.sort) : "",       // Pass if sorting is remote
                    skipCount: loadOptions.skip >= 0 ? loadOptions.skip : 0,     // The number of records to skip
                    maxResultCount: loadOptions.take > 0 ? loadOptions.take : 100,     // The number of records to take
                    requireTotalCount: true,   // A flag telling the server whether the total count of records (totalCount) is required

                }).done(function (result) {
                    debugger;
                    result.data = result.items;
                    // You can process the received data here
                    d.resolve(result, {
                        //totalCount: result.result.totalCount,
                    });
                });
                return d.promise();
            },
            insert: function (values) {
               // debugger;
                return abp.services.app.department.create(values).done(function () {
                    displayToast('@String.Format(@Messages.ObjectAddedSuccessfully,@Tokens.Department)', 'success');
                    $(".dx-loadpanel-content").hide();
                });
            },
            update: function (key, values) {
              //  debugger;
                return abp.services.app.department.update(values).done(function () {
                    displayToast('@String.Format(@Messages.ObjectUpdatedSuccessfully, @Tokens.Department)', 'success');
                    $(".dx-loadpanel-content").hide();
                      $('#table').dxDataGrid("instance").refresh();
                });
            },
            remove: function (key) {
                return abp.services.app.department.delete(key, { async: false }).done(function () {
                    displayToast( '@String.Format(@Messages.ObjectDeleedSuccessfully,@Tokens.Department)' , 'success');
                    $(".dx-loadpanel-content").hide();
                    $('#table').dxDataGrid("instance").refresh();
                });
            },
        });
        $(function () {
            var types;
            debugger
            var dataGrid = $("#table").dxDataGrid({
                dataSource: gridDataSource,
                searchPanel: {
                    visible: true,
                    width: 240,
                },
                paging: {
                    pageSize: 6,
                    pageIndex: 1    // Shows the second page
                },
                headerFilter: {
                    visible: true,
                    allowSearch: true
                },
                filterRow: {
                    visible: true,
                    applyFilter: "auto"
                },
                sorting: {
                    mode: "multiple"
                },
                columnsAutoWidth: true,
                pager: {
                    visible: true,
                    showPageSizeSelector: true,
                    allowedPageSizes: [5, 10, 25, 50],
                    showInfo: true,
                },
                editing: {
                    allowAdding: true,
                    allowUpdating: true,
                    allowDeleting: true,
                    useIcons: true,
                    texts: {
                        addRow: "@Tokens.AddDepartment",
                        confirmDeleteMessage: null,
                        saveRowChanges: "@Tokens.Save",
                        cancelRowChanges: "@Tokens.Cancel",
                    },
                    mode: "popup",
                    popup: {
                        showTitle: true,

                        width: '700',
                        height: '400',
                        title: "@Tokens.DepartmentInfo",
                    },

                    form: {
                        itemType: "group",
                        colCount: '2',
                        colCountByScreen: {
                            md: 4,
                            sm: 2,
                        },

                        //colCount: 9,
                        //colSpan: 2,
                        items: [
                            {
                                dataField: "name",
                                dataType: "String",
                                validationRules: [
                                    {
                                        type: "required", message: '@string.Format(DataAnnotations.Required, Tokens.Name)'
                                    },
                                ]
                            },   
                            {
                                dataField: "superVisorId",
                        caption: "@Tokens.Admin",
                       validationRules: [
                                    {
                                        type: "required", message: '@string.Format(DataAnnotations.Required, Tokens.Name)'
                                    },
                                ],
                        lookup: {
                            valueExpr: "value",
                            displayExpr: "text",
                            dataSource: admins,
                        }
                    },

                        ]
                    }
                },

                  onRowRemoving: function (e) {
                    displayCOnfirmDelete(e, '@String.Format(@Messages.ConfirmDeleteObject,@Tokens.Department)');
                },

                columns: [
                    {
                        dataField: "id",
                        caption: "@Tokens.Id",
                        allowFiltering: false,
                        allowSorting: false,
                        allowSearch: false,
                        allowEditing: false,
                    }, {
                        dataField: "name",
                        dataType: "String",
                        validationRules: [
                            {
                                type: "required", message: '@string.Format(DataAnnotations.Required, Tokens.Name)'
                            },
                        ]
                    },  {
                                dataField: "superVisorId",
                        caption: "@Tokens.Admin",
                        allowFiltering: false,
                        visible: true,
                        allowSorting: false,
                        allowSearch: false,
                        lookup: {
                            valueExpr: "value",
                            displayExpr: "text",
                            dataSource: admins,
                        }
                    },


                    {
                        dataField: "creationTime",
                        caption: "@Tokens.CreationDateandTime",
                        dataType: "datetime",
                        allowFiltering: false,
                        allowSorting: false,
                        allowSearch: false,
                        sortIndex: 0,
                        sortOrder: "desc",
                    }, {
                        dataField: "creatorUserName",
                        caption: "@Tokens.Createdby",
                        allowFiltering: false,
                        allowSorting: false,
                        allowSearch: false,
                        allowEditing: false,
                    },

                    @*{
                        type: "buttons",
                        buttons: ["delete1", {
                            hint: "@Tokens.Delete",
                            icon: "trach",
                            onClick: function (e) {
                              //  window.location.href = abp.appPath + "Sessions/Details/" + e.row.data.id;
                            }
                        },
                        ]
                    },*@
                ],
                masterDetail: {
                    enabled: true,
                    template: masterDetailTemplate
                },
                onEditingStart: function (e) {
                    isEditable = true;
                },
                onCellPrepared: function (e) {
                    if (e.rowType === "data" && e.columnIndex == 13) {
                        var $links = e.cellElement.find(".dx-link-delete")
                        if (e.row.data.isActive == false) {
                            $links.removeClass('dx-icon-trash');
                            $links.removeClass('dx-icon-close');
                            $links.addClass('dx-icon-check');
                            $links.attr('title', "Activate");
                        }
                        else {
                            $links.removeClass('dx-icon-trash');
                            $links.removeClass('dx-icon-check');
                            $links.addClass('dx-icon-close');
                            $links.attr('title', "Deactivate");
                        }
                        //else {
                        //    $links.removeClass('dx-icon-trash');
                        //     $links.removeClass('dx-icon-check');
                        //    $links.addClass('dx-icon-close');
                        //    $links.attr('title',"Deactivate");
                        //}


                    }
                },
                onRowExpanding: function (e) {

                    e.component.collapseAll(-1);
                },
                remoteOperations: true,
                //onRowUpdating: function (options) {
                //    debugger;
                //    options.newData = $.extend({}, options.oldData, options.newData);
                //},
            }).dxDataGrid("instance");
        });

         function masterDetailTemplate(_, masterDetailOptions) {


             abp.services.app.Department.get({ id: masterDetailOptions.data.id },
                {
                    async: false,
                }).done(function (result) {
                 //   debugger;
                    detail = result;
                });

            return $("<div>").dxTabPanel({
                items: [{
                    title: "@Tokens.DepartmentDetails",
                    template: createPositionTabTemplate(detail)
                }]
            });
        }

        function createPositionTabTemplate(detail) {
       //     debugger;
            return function () {

                return $("<div>").addClass("detail-form form-container").dxForm({
                    formData: detail,
                    readOnly: true,
                    colCount: 'auto',
                    items: [{ dataField: "id", label: { text: "@Tokens.Id" } },
                        { dataField: "name", label: { text: "@Tokens.Name" } },

                          {
                        dataField: "isActive",
                        caption: "Status",
                        allowSorting: false,
                               allowFiltering: false,
                        allowSearch: false,
                        lookup: {
                            valueExpr: "id",
                            displayExpr: "name",
                            dataSource: [{ name: "Active", id: true }, { name: "InActive", id: false }]
                        }
                        },

                    {
                        dataField: "creationTime", label: { text: "@Tokens.CreationDate" }, editorType: "dxDateBox", editorOptions: {
                            displayFormat: "MM/dd/yyyy hh:mm a",
                            width: "100%",
                        }
                    },
                    { dataField: "creatorUserName", label: { text: "@Tokens.Createdby" } },

                    ],
                });
            }
        }


    </script>
}